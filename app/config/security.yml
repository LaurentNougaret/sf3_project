# To get started with security, check out the documentation:
# http://symfony.com/doc/current/security.html
security:
    encoders:
        CaradvisorBundle\Entity\User:
            algorithm: bcrypt
        Symfony\Component\Security\Core\User\UserInterface:
            algorithm: bcrypt
        CaradvisorBundle\Entity\Admin:
            algorithm: bcrypt

    # http://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
    providers:
        user_db:
            entity:
                class: CaradvisorBundle:User
                property: userName
        admin_db:
            entity:
                class: CaradvisorBundle:Admin
                property: username
        chain_provider:
            chain:
                providers: [user_db, admin_db]

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            form_login:
                login_path: /admin/login
                check_path: /admin/login
                default_target_path: default_security_target
                #username_parameters:
                #password_parameters:
            logout:
                path: /logout
                target: /
            remember_me:
                secret: '%secret%'
            provider: admin_db

            # http://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
            #http_basic: ~

            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            #form_login: ~
        main:
            anonymous: ~
            form_login:
                login_path: /login
                check_path: /login
                default_target_path: default_security_target
                csrf_token_generator: security.csrf.token_manager
                #username_parameters:
                #password_parameters:
            logout:
                path: /logout
                target: /
            remember_me:
                secret: '%secret%'
            provider: user_db
            # activate different ways to authenticate

    role_hierarchy:
        ROLE_ADMIN: [ROLE_PART, ROLE_PRO]

    access_control:
        #- require ROLE_ADMIN for /dashboard*
        - { path: ^/admin/dashboard, roles: ROLE_ADMIN }

        # doesn't require special role for authentication
        - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY}

        # require ROLE_PART and ROLE_PRO for /user*
        - { path: ^/user, roles: [ROLE_PART, ROLE_PRO] }



